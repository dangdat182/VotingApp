#test
name: Combined Build Pipeline

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build-result:
    name: Build and Push Result Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Result image
        run: |
          docker build -t dexlo/result:latest ./result
          docker push dexlo/result:latest

  build-vote:
    name: Build and Push Vote Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Vote image
        run: |
          docker build -t dexlo/vote:latest ./vote
          docker push dexlo/vote:latest

  build-worker:
    name: Build and Push Worker Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Worker image
        run: |
          docker build -t dexlo/worker:latest ./worker
          docker push dexlo/worker:latest

  sonarqube-analysis:
    name: SonarQube Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17 for SonarQube
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install SonarScanner
        run: npm install -g sonar-scanner

      - name: Run SonarScanner
        run: |
          sonar-scanner \
          -Dsonar.projectKey=dangdat182_VotingApp \
          -Dsonar.organization=dangdat182 \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

#   setup-aws-cli:
#     name: Set up AWS CLI
#     runs-on: ubuntu-latest
#     steps:
#       - name: Remove existing AWS CLI
#         run: |
#           sudo rm -rf /usr/local/aws-cli
#           sudo rm -rf /usr/local/bin/aws

#       - name: Install AWS CLI
#         run: |
#           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#           unzip awscliv2.zip
#           sudo ./aws/install --update
#           aws --version

#       - name: Configure AWS CLI
#         run: |
#           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws configure set default.region us-east-1
          
#       - name: Verify AWS CLI Configuration
#         run: |
#           aws configure list

#       - name: Test AWS CLI Configuration
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: us-east-1
#         run: |
#           aws sts get-caller-identity --debug
# ##
#   setup-eks:
#     name: Set up EKS Cluster
#     needs: setup-aws-cli
#     runs-on: ubuntu-latest
#     steps:
#       - name: Create EKS Cluster
#         run: |
#           # Create EKS Cluster
#           CLUSTER_NAME="my-eks-cluster"
#           aws eks create-cluster \
#             --name $CLUSTER_NAME \
#             --role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/EKS-Cluster-Role \
#             --resources-vpc-config subnetIds=subnet-05bf8076267cf72fa,securityGroupIds=sg-00282bad4fa5606ae \
#             --kubernetes-version "1.21" \
#             --region us-east-1

#       - name: Wait for EKS Cluster to be Active
#         run: |
#           aws eks wait cluster-active --name $CLUSTER_NAME

#       - name: Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --name $CLUSTER_NAME --region us-east-1

#       - name: Install kubectl
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y kubectl

#   prometheus-grafana:
#     name: Set up Prometheus and Grafana
#     needs: setup-eks
#     runs-on: ubuntu-latest
#     steps:
#       - name: Install Prometheus and Grafana on EKS
#         run: |
#           kubectl apply -f https://github.com/prometheus-operator/prometheus-operator/raw/main/bundle.yaml
#           kubectl apply -f https://raw.githubusercontent.com/grafana/helm-charts/main/charts/grafana/templates/deployment.yaml
#           kubectl apply -f https://raw.githubusercontent.com/grafana/helm-charts/main/charts/grafana/templates/service.yaml

#       - name: Expose Grafana and Prometheus
#         run: |
#           kubectl expose deployment prometheus-operator --type=LoadBalancer --name=prometheus
#           kubectl expose deployment grafana --type=LoadBalancer --name=grafana

#   deploy:
#     name: Deploy Application to Kubernetes
#     needs: [setup-eks, prometheus-grafana]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Deploy to Kubernetes
#         run: |
#           kubectl apply -f k8s-specifications/
  deploy:
    name: Deploy Application to Minikube
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install kubectl
      run: |
        if ! command -v minikube &> /dev/null; then
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
        fi
        minikube start --driver=docker || echo "Minikube is already running"
        sudo snap install kubectl --classic

    # - name: Set up KUBECONFIG for Minikube
    #   run: |
    #     mkdir -p ~/.kube
    #     echo "${{ secrets.MINIKUBE_KUBECONFIG }}" | base64 --decode > ~/.kube/config
    #     chmod 600 ~/.kube/config

    - name: Install Helm
      run: |
        if ! command -v helm &> /dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        fi

    - name: Add Prometheus and Grafana Repos
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

    - name: Deploy to Kubernetes
      run: |
        cd /home/dexlo/VotingApp
        minikube kubectl -- apply -f k8s-specifications/
    
    - name: Deploy Prometheus
      run: |
        if ! kubectl get pods -n monitoring | grep prometheus-server &> /dev/null; then
          helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace
        else
          echo "Prometheus is already deployed"
        fi

    - name: Deploy Grafana
      run: |
        if ! kubectl get pods -n monitoring | grep grafana &> /dev/null; then
          helm install grafana grafana/grafana --namespace monitoring
        else
          echo "Grafana is already deployed"
        fi

    - name: Expose Grafana and Prometheus
      run: |
        kubectl expose service prometheus-server --type=NodePort --name=prometheus-nodeport --namespace monitoring
        kubectl expose service grafana --type=NodePort --name=grafana-nodeport --namespace monitoring

